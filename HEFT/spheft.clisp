

(defun input()
  ( write-line "no of proc : " )  
   (defvar proc (read) )
   ( write-line "no of tasks : " )
   (defvar tasks (read) )
   (setq temp 12)
  (terpri)

  (defvar task_time (make-array '( 10 50)))
  (dotimes (i tasks)    ;reading tasks * proc
   ( setq temp 0)   
   (dotimes (j proc )
             (setf (aref task_time i j) (read) )
       (setq temp (+ temp (aref task_time i j) ))
     )

   (setf (aref avg i) (/ (float temp) proc ))
  )

  
  (defvar adj (make-array '(10 10)))


  (dotimes (i 10)  
     (dotimes (j 10 )
             (setf (aref adj i j) -1 )
     )
  )

       (setq edges_count (read) )
       
  (dotimes (i edges_count)    
    (setq x (read) ) (setq y (read) ) (setq z (read) )

    (setf (aref adj x y ) z )

    (setf (aref par y (aref no_par y)) x)
    (setf (aref no_par y) (+ 1 (aref no_par y)))



  ) 
    
  ) 

(defun rec_rank(i)
 
  (setq rr_maxi 0)
  (setq rr_temp 0)

   ( dotimes (j tasks)
      ( if(  /=  (aref adj i j) -1 )
         (progn

   ( setq rr_temp (rec_rank j))

   (if (< rr_maxi ( + (aref adj i j) rr_temp))
     (setq rr_maxi ( +  (aref adj i j)rr_temp))
   )

   )

      )

   )

   (setf (aref rank i) (+ (aref avg i) rr_maxi))
   (aref rank i)

)

(defun  findrank()
      
  (dotimes(i tasks)
    (rec_rank i)
   )

)


(defun sorting() 
 (setq sort_temp (- tasks 1))
 (dotimes (i tasks)
  (dotimes (j sort_temp) 
    (if (<  (aref rank j) (aref rank (+ j 1)) )
  (progn 
   (rotatef (aref rank j) (aref rank (+ j 1)) )
   (rotatef (aref rank_order j) (aref rank_order (+ j 1)) )
  )
    )   
  
  )
 )
 ) 
    
(defun solve (index)
  (setf m_pi 0)
  (dotimes (pi proc)
    (print 'p)
    (setf maxi (float 1))
    (print (aref no_par index) )
    (dotimes (i (aref no_par index))
      (print 's)
      (print (aref final_proc (aref par index i)))
      (if (/= pi (aref final_proc (aref par index i)))
        (progn
          (print 'h)
          (if (< maxi (+ (aref adj (aref par index i) index) (aref final_ft (aref par index i)) 1))
            (setf maxi (+ (aref adj (aref par index i) index) (aref final_ft (aref par index i)) 1))
            ()
          ) 
        )
        (progn 
          (print 'h)
          (if (< maxi (+ (aref final_ft (aref par index i)) 1))
            (setf maxi (+ (aref final_ft (aref par index i)) 1))
            ()
          )
        )

      )
    )

    (setf (aref est index pi) maxi)
    (print maxi)

    (setf (aref eft index pi) (- (+ maxi (aref task_time index pi)) 1) )
    (print 'r)
    (setf check 0)
    (if (equal (aref tasks_done pi) 0)
      (setf check 0)      
    )
    (if (> (aref tasks_done pi) 0)
      (progn
        (if (< (aref eft index pi) (aref proc_st pi 0))
          (setf check 1)
        )
      )
    )
    (print 'v)
    (setf n2 (- (aref tasks_done pi) 1))
    (print 'l)
    (print n2)
    (if (> n2 0)(progn
    (print n2)
    (dotimes (i n2)
      (print 'u)
      (if (equal check 1)
        ()
        (progn
          (cond (and (> (aref est index pi) (aref proc_ft pi i)) (< (aref eft index pi) (aref proc_st pi (+ i 1))))
            (setf check 1)
            (and (<= (aref est index pi) (aref proc_ft pi i)) (>= (- (- (aref proc_st pi (+ i 1))  (aref proc_ft pi i)) 1) (task_time index pi)))
            (progn 
              (setf check 1)
              (setf (aref est index pi) (+ (aref proc_ft pi i) 1))
            )
          )

        )
      )
    )
    )
    ())

    (if (= check 0)
      (progn
      (if (> (aref tasks_done pi) 0)
      (progn
        (if (<= (aref est index pi) (aref proc_ft pi (- (aref tasks_done pi) 1)))
          (progn 
            (setf (aref est index pi) (+ (aref proc_ft pi (- (aref tasks_done pi) 1)) 1))
            (setf check 1)
          )
        )
        )
        ())
      )
    )

    (setf (aref eft index pi) (- (+ (aref est index pi) (aref task_time index pi)) 1))
    (if (< (aref eft index pi) (aref eft index m_pi))
      (setf m_pi pi)
    )
  )

  (setf (aref final_ft index) (aref eft index m_pi))
  (setf (aref final_st index) (aref est index m_pi))
  (setf (aref final_proc index) m_pi)
  (setf (aref proc_st m_pi (aref tasks_done m_pi)) (aref final_st index))
  (setf (aref proc_ft m_pi (aref tasks_done m_pi)) (aref final_ft index))

  (setf (aref tasks_done m_pi) (+ (aref tasks_done m_pi) 1))



)
(progn
(defvar rank (make-array '(10)))
(defvar avg (make-array '(10)))
(defvar rank_order (make-array '(10)))
(defvar par (make-array '(10 10)))
(defvar no_par (make-array '(10)))
(defvar est (make-array '(10 10)))
(defvar eft (make-array '(10 10)))
(defvar final_proc (make-array '(10)))
(defvar final_st (make-array '(10)))
(defvar final_ft (make-array '(10)))
(defvar tasks_done (make-array '(10)))
(defvar proc_ft (make-array '(10 10)))
(defvar proc_st (make-array '(10 10)))
  
  (dotimes (i 10)
   (setf (aref rank_order i) i )
   (setf (aref no_par i) 0)
   (setf (aref tasks_done i) 0)

  )
  (input) 

 (findrank)

 (sorting)  


  (dotimes (i tasks)
   ;(print (aref rank i) )
  (print (aref rank_order i)  )
  )

  (dotimes (i tasks)
    (solve (aref rank_order i))
  )
 )







