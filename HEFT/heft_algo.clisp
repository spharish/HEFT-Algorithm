(setq max 10000)
 

(setq i 0)
(setq j 0)

(setq processor (read))
(setq task (read))
(setf rank (make-array `(,task ,2)))
(setf p_done (make-array task))
(setf w_avg (make-array task))
(setf avail (make-array processor))
(setf c (make-array `(,task ,task)))
(setf w (make-array `(,task ,processor)))
(setf est (make-array `(,task ,processor)))
(setf eft (make-array `(,task ,processor)))
(setf aft (make-array task))

(loop 
    (setf (aref w_avg i) 0)
    (setq j 0)
    (loop 
        (setf (aref w i j) (read) )
        (setf (aref est i j) 0 )
        (setf (aref w_avg i) (+ (aref w_avg i) (aref w i j))) 
        (setq j (+ j 1))
        (when (>= j processor)
        (return))
        )
        (setf (aref w_avg i) (float (/ (aref w_avg i) processor)))
        ;(print (aref w_avg i))
        (setq i (+ i 1))
        (when (>= i task)
        (return))
        )
(setq i 0)
(loop 
    (setq j 0)
    (loop 
        
        (setf (aref c i j) 0 )
        ;(print (aref c i j))
        (setq j (+ j 1))
        (when (>= j task)
        (return))
        )
    (setq i (+ i 1))
        (when (>= i task)
        (return))
        )

    (loop 
        (setq x (read))
        (when (equal x -1)
        (return))
        (setq y (read))
        (setf (aref c x y) (read))
        )
(setq i 0)
(loop 
    (setf (aref p_done i) -1)
    (setf (aref rank i 1) -1)
    (setf (aref rank i 0) i)
    (setq counter 0)
    (setq counter1 0)
    (setq j 0)
    (loop 
        
        (when (not (equal (aref c i j) 0))
        (setq counter (+ counter 1))
        ;(print 'hey)
        )
        (when (not (equal (aref c j i) 0))
        (setq counter1 (+ counter1 1)))
    (setq j (+ j 1))
        (when (>= j task)
        (return))
        )
    (when (equal counter 0)
    (setf (aref rank i 1) (aref w_avg i))
    ;(print i)
    ;(print (aref rank i 1))
    )
    
    (when (equal counter1 0)
    
    (let ((k '0) (min '99999))
        (loop 
            (setf (aref est i k) 0)
            (setf (aref eft i k) (aref w i k))
            (when (> min (aref eft i k))
            (setq min (aref eft i k))
            (setf (aref aft i) min)
            (setf (aref p_done i) k)
            )
            (setq k (+ k 1))
            (when (>= k processor)
            (return))
        )
    )
    (let ((z (aref p_done i))) 
    (setf (aref avail z) (aref aft i)))
    ;(format t "AFT: = ~F~% processor = ~F" (aref aft i) (aref p_done i)) 
    )
    (setq i (+ i 1))
        (when (>= i task)
        (return))
)

(setq i 0)
    
(loop
    ;(print (aref rank i 1))
    (setq i (+ i 1))
    (when (>= i task)
    (return))
    )
    
; rank need to be calculated
